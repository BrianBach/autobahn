
package net.geant.autobahn.tool;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.text.ParseException;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.namespace.QName;

import net.geant.autobahn.aai.AAIException;
import net.geant.autobahn.constraints.ConstraintsNames;
import net.geant.autobahn.constraints.PathConstraints;
import net.geant.autobahn.constraints.Range;
import net.geant.autobahn.constraints.RangeConstraint;
import net.geant.autobahn.intradomain.common.GenericInterface;
import net.geant.autobahn.intradomain.common.GenericLink;
import net.geant.autobahn.tool.types.ReservationParamsType;

import org.apache.cxf.common.logging.Log4jLogger;
import org.apache.cxf.common.logging.LogUtils;

/**
 * This class was generated by Apache CXF (incubator) 2.0.3-incubator
 * Fri Feb 22 14:54:57 CET 2008
 * Generated source version: 2.0.3-incubator
 * 
 */

public final class Tool_ToolPort_Client {

    private static final QName SERVICE_NAME = new QName("http://tool.autobahn.geant.net/", "ToolService");
    private ToolService service;
    
    private Tool_ToolPort_Client(String endPoint) {
        service = new ToolService(endPoint);
    }

    public static void main(String args[]) throws Exception {

    	//ToolService ss = new ToolService("http://150.254.160.216:8081/autobahn/tool");
        //ToolService ss = new ToolService("http://poznan.autobahn.psnc.pl:8080/autobahn/tool");

    	LogUtils.setLoggerClass(Log4jLogger.class);

    	Tool_ToolPort_Client cli = new Tool_ToolPort_Client("http://localhost:9001/autobahn/tool");
    	//Tool_ToolPort_Client cli = new Tool_ToolPort_Client("http://leontodon.man.poznan.pl:8081/autobahn/tool");
    	cli.addReservation("res1");
    	//cli.removeReservation("res1");
        
        System.exit(0);
    }
    
    private void removeReservation(String resID) throws AAIException, SystemException, ReservationNotFoundException, RequestException {
    	Tool port = service.getToolPort();
    	
    	port.removeReservation(resID, null, null);
	}

	private void addReservation(String resID) throws ParseException, DatatypeConfigurationException, AAIException, SystemException, RequestException, ResourceNotFoundException {
    	Tool port = service.getToolPort();
    	
        ReservationParamsType params = new ReservationParamsType();
        params.setCapacity(100000);
        params.setMaxDelay(5);
        params.setStartTime(new GregorianCalendar(2010,04,15,13,52,00));
        params.setEndTime(new GregorianCalendar(2010,04,15,13,55,00));

        PathConstraints pcon = new PathConstraints();
        
        RangeConstraint vlans = new RangeConstraint();
        Range range = new Range();
        range.setMin(123);
        range.setMax(130);
        vlans.getRanges().add(range);
        
        pcon.getRangeConstraints().add(vlans);
        pcon.getRangeNames().add(ConstraintsNames.VLANS);
        

/*        params.setPathConstraintsEgress(pcon);
        
        GenericLink gl = new GenericLink();
        gl.setLinkId(123);
		
		GenericInterface p1 = new GenericInterface();
		p1.setName("p1");
		gl.setStartInterface(p1);
		
		GenericInterface p2 = new GenericInterface();
		p2.setName("p2");
		gl.setEndInterface(p2);

        
        List<GenericLink> links = new ArrayList<GenericLink>();
        links.add(gl);
        
        
        port.addReservation("res1", , params);*/
    }
    
}
