
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package net.geant.autobahn.idcp;


import java.util.List;
import org.apache.log4j.Logger;

import net.geant.autobahn.idcp.CreatePathContent;
import net.geant.autobahn.idcp.GetTopologyResponseContent;
import net.geant.autobahn.idcp.GlobalReservationId;
import net.geant.autobahn.idcp.ListReply;
import net.geant.autobahn.idcp.PathInfo;
import net.geant.autobahn.idcp.ResCreateContent;
import net.geant.autobahn.idcp.ResDetails;
import net.geant.autobahn.idcp.TeardownPathContent;
import net.geant.autobahn.network.Link;
import org.ogf.schema.network.topology.ctrlplane._20080828.CtrlPlaneDomainContent;
import org.ogf.schema.network.topology.ctrlplane._20080828.CtrlPlaneDomainSignatureContent;
import org.ogf.schema.network.topology.ctrlplane._20080828.CtrlPlaneHopContent;
import org.ogf.schema.network.topology.ctrlplane._20080828.CtrlPlaneTopologyContent;

/**
 * This class was generated by Apache CXF 2.2.6
 * Fri Sep 10 08:53:29 CEST 2010
 * Generated source version: 2.2.6
 *
 */

@javax.jws.WebService(
                      serviceName = "OSCARS",
                      portName = "OSCARS",
                      targetNamespace = "http://oscars.es.net/OSCARS",
                      wsdlLocation = "file:etc/wsdl/IDCP/OSCARS.wsdl",
                      endpointInterface = "net.geant.autobahn.idcp.OSCARS")

public class OSCARSImpl implements OSCARS {

    private static Logger log = Logger.getLogger(OSCARSImpl.class);

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#cancelReservation(net.geant.autobahn.idcp.GlobalReservationId  cancelReservation )*
     */
    public java.lang.String cancelReservation(GlobalReservationId cancelReservation) throws AAAFaultMessage , BSSFaultMessage    {

        String resId = cancelReservation.getGri();
        try {
        	FromIdcp.cancel(resId);
            return resId;
        } catch (IdcpException e) {
            throw new BSSFaultMessage(e.getMessage());
        }
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#createReservation(java.lang.String  globalReservationId ,)long  startTime ,)long  endTime ,)int  bandwidth ,)java.lang.String  description ,)net.geant.autobahn.idcp.PathInfo  pathInfo ,)java.lang.String  token ,)java.lang.String  status )*
     */
    public void createReservation(javax.xml.ws.Holder<java.lang.String> globalReservationId,long startTime,long endTime,int bandwidth,
    		java.lang.String description,javax.xml.ws.Holder<PathInfo> pathInfo,javax.xml.ws.Holder<java.lang.String> token,
    		javax.xml.ws.Holder<java.lang.String> status) throws AAAFaultMessage , BSSFaultMessage    {

    	CtrlPlaneHopContent[] hops = new CtrlPlaneHopContent[pathInfo.value.getPath().getHop().size()];
 		for (int i=0; i < pathInfo.value.getPath().getHop().size(); i++) {
 			hops[i] = pathInfo.value.getPath().getHop().get(i);
 		}
        CtrlPlaneHopContent srcHop = hops[hops.length - 2];
        final String src = srcHop.getLinkIdRef();
    	final String dst = pathInfo.value.getLayer2Info().getDestEndpoint();
    	final String resId = globalReservationId.value;
    	final String vlan = pathInfo.value.getLayer2Info().getSrcVtag().getValue();

    	try {
    		FromIdcp.create(resId, description, src, dst, startTime, endTime, bandwidth, vlan, pathInfo.value);
    	} catch (Exception e) {
    		log.info("idcp create reservation failed - " + e.getMessage());
    		throw new BSSFaultMessage(e.getMessage());
    	}

   		// ACCEPTED must be returned
    	token.value = "not set";
    	status.value = "ACCEPTED";
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#queryReservation(java.lang.String  gri ,)java.lang.String  globalReservationId ,)java.lang.String  login ,)java.lang.String  status ,)java.lang.Long  startTime ,)java.lang.Long  endTime ,)java.lang.Long  createTime ,)java.lang.Integer  bandwidth ,)java.lang.String  description ,)net.geant.autobahn.idcp.PathInfo  pathInfo )*
     */
    public void queryReservation(java.lang.String gri,javax.xml.ws.Holder<java.lang.String> globalReservationId,javax.xml.ws.Holder<java.lang.String> login,javax.xml.ws.Holder<java.lang.String> status,javax.xml.ws.Holder<java.lang.Long> startTime,javax.xml.ws.Holder<java.lang.Long> endTime,javax.xml.ws.Holder<java.lang.Long> createTime,javax.xml.ws.Holder<java.lang.Integer> bandwidth,javax.xml.ws.Holder<java.lang.String> description,javax.xml.ws.Holder<PathInfo> pathInfo) throws AAAFaultMessage , BSSFaultMessage    {

    	ResDetails res = FromIdcp.query(gri);
    	if (res == null)
    		throw new BSSFaultMessage("Reservation " + gri + " not found");

    	globalReservationId.value = res.getGlobalReservationId();
    	login.value = res.getLogin();
    	status.value = res.getStatus();
    	startTime.value = res.getStartTime();
    	endTime.value = res.getEndTime();
    	createTime.value = 0L;
    	bandwidth.value = res.getBandwidth();
    	description.value = res.getDescription();
    	pathInfo.value = res.getPathInfo();
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#refreshPath(java.lang.String  token ,)java.lang.String  globalReservationId ,)java.lang.String  status )*
     */
    public void refreshPath(java.lang.String token,javax.xml.ws.Holder<java.lang.String> globalReservationId,javax.xml.ws.Holder<java.lang.String> status) throws AAAFaultMessage , BSSFaultMessage    {

    	log.info("Idcp refreshPath - token: " + token );
    	throw new BSSFaultMessage("refreshPath not supported");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#teardownPath(java.lang.String  token ,)java.lang.String  globalReservationId ,)java.lang.String  status )*
     */
    public void teardownPath(java.lang.String token,javax.xml.ws.Holder<java.lang.String> globalReservationId,javax.xml.ws.Holder<java.lang.String> status) throws AAAFaultMessage , BSSFaultMessage    {

    	log.info("Idcp teardownPath - token: " + token);
    	throw new BSSFaultMessage("teardownPath not supported");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#createPath(java.lang.String  token ,)java.lang.String  globalReservationId ,)java.lang.String  status )*
     */
    public void createPath(java.lang.String token,javax.xml.ws.Holder<java.lang.String> globalReservationId,javax.xml.ws.Holder<java.lang.String> status) throws AAAFaultMessage , BSSFaultMessage    {

    	log.info("Idcp createPath - token: " + token);
    	throw new BSSFaultMessage("createPath not supported");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#getNetworkTopology(net.geant.autobahn.idcp.GetTopologyContent  getNetworkTopology )*
     */
    public net.geant.autobahn.idcp.GetTopologyResponseContent getNetworkTopology(GetTopologyContent getNetworkTopology) throws AAAFaultMessage , BSSFaultMessage    {

    	final String domainId = IdcpManager.getDomainName();
        List<Link> links = FromIdcp.getTopology(false);

        GetTopologyResponseContent cont = new GetTopologyResponseContent();
        CtrlPlaneTopologyContent ctrlTopology = new CtrlPlaneTopologyContent();
        ctrlTopology.setId(domainId);
        ctrlTopology.setIdcId(domainId);
        CtrlPlaneDomainSignatureContent[] ctrlSigns = new CtrlPlaneDomainSignatureContent[1];
        ctrlSigns[0] = new CtrlPlaneDomainSignatureContent();
        ctrlSigns[0].setDomainId(domainId);

        for (CtrlPlaneDomainSignatureContent dsc : ctrlSigns)
            ctrlTopology.getDomainSignature().add(dsc);

        CtrlPlaneDomainContent[] ctrlDomains = OscarsConverter.getOscarsTopology(links);

        for (CtrlPlaneDomainContent dc : ctrlDomains)
            ctrlTopology.getDomain().add(dc);

        cont.setTopology(ctrlTopology);
        return cont;
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#modifyReservation(java.lang.String  globalReservationId ,)long  startTime ,)long  endTime ,)int  bandwidth ,)java.lang.String  description ,)net.geant.autobahn.idcp.PathInfo  pathInfo )*
     */
    public net.geant.autobahn.idcp.ResDetails modifyReservation(java.lang.String globalReservationId,long startTime,long endTime,int bandwidth,java.lang.String description,net.geant.autobahn.idcp.PathInfo pathInfo) throws AAAFaultMessage , BSSFaultMessage    {

    	throw new BSSFaultMessage("Modify not supported");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#notify(org.oasis_open.docs.wsn.b_2.Notify  notify )*
     */
    public void notify(org.oasis_open.docs.wsn.b_2.Notify notify) {

    	// cxf cannot handle notify (unsigned), moved to OSCARSNotifyOnly
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#forward(net.geant.autobahn.idcp.ForwardPayload  payload ,)java.lang.String  payloadSender ,)java.lang.String  contentType ,)net.geant.autobahn.idcp.CreateReply  createReservation ,)net.geant.autobahn.idcp.ModifyResReply  modifyReservation ,)java.lang.String  cancelReservation ,)net.geant.autobahn.idcp.ResDetails  queryReservation ,)net.geant.autobahn.idcp.ListReply  listReservations ,)net.geant.autobahn.idcp.CreatePathResponseContent  createPath ,)net.geant.autobahn.idcp.RefreshPathResponseContent  refreshPath ,)net.geant.autobahn.idcp.TeardownPathResponseContent  teardownPath )*
     */
    public void forward(net.geant.autobahn.idcp.ForwardPayload payload,java.lang.String payloadSender,javax.xml.ws.Holder<java.lang.String> contentType,
    		javax.xml.ws.Holder<CreateReply> createReservation,javax.xml.ws.Holder<ModifyResReply> modifyReservation,
    		javax.xml.ws.Holder<java.lang.String> cancelReservation,javax.xml.ws.Holder<ResDetails> queryReservation,
    		javax.xml.ws.Holder<ListReply> listReservations,javax.xml.ws.Holder<CreatePathResponseContent> createPath,
    		javax.xml.ws.Holder<RefreshPathResponseContent> refreshPath,javax.xml.ws.Holder<TeardownPathResponseContent> teardownPath) throws AAAFaultMessage , BSSFaultMessage    {

    	 ResCreateContent createReservationCon = payload.getCreateReservation();
    	 ModifyResContent modifyCon = payload.getModifyReservation();
         GlobalReservationId cancelCon = payload.getCancelReservation();
         CreatePathContent createPathCon = payload.getCreatePath();
         TeardownPathContent teardownPathCon = payload.getTeardownPath();
         ListRequest listCon = payload.getListReservations();
         GlobalReservationId queryCon = payload.getQueryReservation();

         contentType.value = payload.getContentType();

         if (createReservationCon != null) {

             final String resId = createReservationCon.getGlobalReservationId();
             final String desc = createReservationCon.getDescription();
             final long startTime = createReservationCon.getStartTime();
             final long endTime = createReservationCon.getEndTime();
             final int bandwidth = createReservationCon.getBandwidth();
             final PathInfo pathInfo = createReservationCon.getPathInfo();

             if (pathInfo == null) {
            	 log.info("pathInfo not present");
            	 throw new BSSFaultMessage("pathInfo not present");
             }

             if (!pathInfo.getPathSetupMode().equals(Idcp.PATH_MODE_AUTOMATIC)) {
            	 log.info("invalid path mode: " + pathInfo.getPathSetupMode());
            	 throw new BSSFaultMessage("invalid path mode: " + pathInfo.getPathSetupMode());
             }

             int pathSize = pathInfo.getPath().getHop().size();
             if (pathSize < 3) {
            	 log.info("path contains < 3 hops");
            	 throw new BSSFaultMessage("path contains < 3 hops");
             }

             log.info("========= NEW IDCP RESERVATION ========\n");
             log.info("reservationId: " + resId + ", description: " + desc + ", bandwidth: " + bandwidth);

             if (IdcpManager.isDebugging())
            	 Idcp.printPathInfo(pathInfo);

      		 final String domain = IdcpManager.getDomainName();


      		 CtrlPlaneHopContent srcHop = pathInfo.getPath().getHop().get(pathSize - 2);
      		 String srcPort = srcHop.getLink().getId();
      		 if (!srcPort.contains(domain)) {
      			 log.info("source port " + srcPort + " does not contain " + domain);
      			 throw new BSSFaultMessage("source hop " + srcPort + " does not contain " + domain);
      		 }

      		 CtrlPlaneHopContent dstHop = pathInfo.getPath().getHop().get(pathSize - 1);
      		 String dstPort = dstHop.getLink().getId();
     		 if (!dstPort.contains(domain)) {
     			 log.info("dst port " + dstPort + " does not contain " + domain);
     			 throw new BSSFaultMessage("dst hop " + dstPort + " does not contain " + domain);
     		 }

      		 String suggestedVlan = dstHop.getLink().getSwitchingCapabilityDescriptors().getSwitchingCapabilitySpecificInfo().getSuggestedVLANRange();
      		 String availableVlans = dstHop.getLink().getSwitchingCapabilityDescriptors().getSwitchingCapabilitySpecificInfo().getVlanRangeAvailability();

      		 if (availableVlans == null || availableVlans.equals("any")) {

      			 availableVlans = "2-4094";
      		 }

      		 final String vlan = availableVlans;

             try {
            	 FromIdcp.create(resId, desc, srcPort, dstPort, startTime, endTime, bandwidth, vlan, pathInfo);
             } catch (IdcpException e) {
            	 log.info("create idcp reseration failed - " + e.getMessage());
            	 throw new BSSFaultMessage(e.getMessage());
             }

             CreateReply createReply = new CreateReply();
             createReply.setGlobalReservationId(resId);
             createReply.setPathInfo(pathInfo);
             createReply.setStatus("ACCEPTED");
             createReply.setToken(null);
             createReservation.value = createReply;
         }

         if (cancelCon != null) {

        	 try {
        		 FromIdcp.cancel(cancelCon.getGri());
        	 } catch (IdcpException e) {
            	 log.info("cancel idcp reservation failed - " + e.getMessage());
            	 throw new BSSFaultMessage(e.getMessage());
        	 }
             cancelReservation.value = cancelCon.getGri();
         }

         if (modifyCon != null) {

        	 try {
        		 FromIdcp.modify(modifyCon.getGlobalReservationId(), modifyCon.getStartTime(), modifyCon.getEndTime());
        	 } catch (IdcpException e) {
            	 log.info("modify idcp reservation failed - " + e.getMessage());
            	 throw new BSSFaultMessage(e.getMessage());
        	 }

        	 ModifyResReply reply = new ModifyResReply();
			 IdcpReservation reservation = IdcpReservation.getReservation(modifyCon.getGlobalReservationId());
			 if (reservation != null) {
				 reply.setReservation(reservation.getResDetails());
			 } else {
				 // FIXME: In this case we should return a failure
			 }
             modifyReservation.value = reply;
         }

         if (createPathCon != null) {
             log.info("CreatePath received: " + createPathCon.getGlobalReservationId());
             CreatePathResponseContent res = new CreatePathResponseContent();
             res.setGlobalReservationId(createPathCon.getGlobalReservationId());
             res.setStatus("INSETUP");
             createPath.value = res;
         }

         if (teardownPathCon != null) {
             log.info("TeardownPath received: " + teardownPathCon.getGlobalReservationId());
             TeardownPathResponseContent res = new TeardownPathResponseContent();
             res.setGlobalReservationId(teardownPathCon.getGlobalReservationId());
             res.setStatus("INTEARDOWN");
             teardownPath.value = res;
         }

         if (listCon != null)  {
        	 // not support through forward, use regular list
        	 throw new BSSFaultMessage("operation not supported");
         }

         if (queryCon != null) {
        	 // not support through forward, use regular query
        	 throw new BSSFaultMessage("operation not supported");
         }
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#listReservations(net.geant.autobahn.idcp.ListRequest  listReservations )*
     */
    public net.geant.autobahn.idcp.ListReply listReservations(ListRequest listReservations) throws AAAFaultMessage , BSSFaultMessage    {

    	ListReply response = new ListReply();

    	List<ResDetails> res = FromIdcp.list();
    	if (res == null) {
    		response.setTotalResults(0);
    	} else {
    		response.setTotalResults(res.size());
    		for (ResDetails rd : res)
    			response.getResDetails().add(rd);
    	}
    	return response;
    }
}
