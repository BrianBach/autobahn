
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package net.geant.autobahn.idcp;

import java.util.logging.Logger;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 2.2.6
 * Fri Sep 10 08:53:29 CEST 2010
 * Generated source version: 2.2.6
 * 
 */

@javax.jws.WebService(
                      serviceName = "OSCARS",
                      portName = "OSCARS",
                      targetNamespace = "http://oscars.es.net/OSCARS",
                      wsdlLocation = "file:src/main/resources/wsdl/IDCP/OSCARS.wsdl",
                      endpointInterface = "net.geant.autobahn.idcp.OSCARS")
                      
public class OSCARSImpl implements OSCARS {

    private static final Logger LOG = Logger.getLogger(OSCARSImpl.class.getName());

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#cancelReservation(net.geant.autobahn.idcp.GlobalReservationId  cancelReservation )*
     */
    public java.lang.String cancelReservation(GlobalReservationId cancelReservation) throws AAAFaultMessage , BSSFaultMessage    { 
        LOG.info("Executing operation cancelReservation");
        System.out.println(cancelReservation);
        try {
            java.lang.String _return = "";
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new AAAFaultMessage("AAAFaultMessage...");
        //throw new BSSFaultMessage("BSSFaultMessage...");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#createReservation(java.lang.String  globalReservationId ,)long  startTime ,)long  endTime ,)int  bandwidth ,)java.lang.String  description ,)net.geant.autobahn.idcp.PathInfo  pathInfo ,)java.lang.String  token ,)java.lang.String  status )*
     */
    public void createReservation(javax.xml.ws.Holder<java.lang.String> globalReservationId,long startTime,long endTime,int bandwidth,java.lang.String description,javax.xml.ws.Holder<PathInfo> pathInfo,javax.xml.ws.Holder<java.lang.String> token,javax.xml.ws.Holder<java.lang.String> status) throws AAAFaultMessage , BSSFaultMessage    { 
        LOG.info("Executing operation createReservation");
        System.out.println(globalReservationId.value);
        System.out.println(startTime);
        System.out.println(endTime);
        System.out.println(bandwidth);
        System.out.println(description);
        System.out.println(pathInfo.value);
        try {
            java.lang.String tokenValue = "";
            token.value = tokenValue;
            java.lang.String statusValue = "";
            status.value = statusValue;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new AAAFaultMessage("AAAFaultMessage...");
        //throw new BSSFaultMessage("BSSFaultMessage...");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#queryReservation(java.lang.String  gri ,)java.lang.String  globalReservationId ,)java.lang.String  login ,)java.lang.String  status ,)java.lang.Long  startTime ,)java.lang.Long  endTime ,)java.lang.Long  createTime ,)java.lang.Integer  bandwidth ,)java.lang.String  description ,)net.geant.autobahn.idcp.PathInfo  pathInfo )*
     */
    public void queryReservation(java.lang.String gri,javax.xml.ws.Holder<java.lang.String> globalReservationId,javax.xml.ws.Holder<java.lang.String> login,javax.xml.ws.Holder<java.lang.String> status,javax.xml.ws.Holder<java.lang.Long> startTime,javax.xml.ws.Holder<java.lang.Long> endTime,javax.xml.ws.Holder<java.lang.Long> createTime,javax.xml.ws.Holder<java.lang.Integer> bandwidth,javax.xml.ws.Holder<java.lang.String> description,javax.xml.ws.Holder<PathInfo> pathInfo) throws AAAFaultMessage , BSSFaultMessage    { 
        LOG.info("Executing operation queryReservation");
        System.out.println(gri);
        try {
            java.lang.String globalReservationIdValue = "";
            globalReservationId.value = globalReservationIdValue;
            java.lang.String loginValue = "";
            login.value = loginValue;
            java.lang.String statusValue = "";
            status.value = statusValue;
            java.lang.Long startTimeValue = null;
            startTime.value = startTimeValue;
            java.lang.Long endTimeValue = null;
            endTime.value = endTimeValue;
            java.lang.Long createTimeValue = null;
            createTime.value = createTimeValue;
            java.lang.Integer bandwidthValue = null;
            bandwidth.value = bandwidthValue;
            java.lang.String descriptionValue = "";
            description.value = descriptionValue;
            net.geant.autobahn.idcp.PathInfo pathInfoValue = null;
            pathInfo.value = pathInfoValue;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new AAAFaultMessage("AAAFaultMessage...");
        //throw new BSSFaultMessage("BSSFaultMessage...");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#refreshPath(java.lang.String  token ,)java.lang.String  globalReservationId ,)java.lang.String  status )*
     */
    public void refreshPath(java.lang.String token,javax.xml.ws.Holder<java.lang.String> globalReservationId,javax.xml.ws.Holder<java.lang.String> status) throws AAAFaultMessage , BSSFaultMessage    { 
        LOG.info("Executing operation refreshPath");
        System.out.println(token);
        System.out.println(globalReservationId.value);
        try {
            java.lang.String statusValue = "";
            status.value = statusValue;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new AAAFaultMessage("AAAFaultMessage...");
        //throw new BSSFaultMessage("BSSFaultMessage...");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#teardownPath(java.lang.String  token ,)java.lang.String  globalReservationId ,)java.lang.String  status )*
     */
    public void teardownPath(java.lang.String token,javax.xml.ws.Holder<java.lang.String> globalReservationId,javax.xml.ws.Holder<java.lang.String> status) throws AAAFaultMessage , BSSFaultMessage    { 
        LOG.info("Executing operation teardownPath");
        System.out.println(token);
        System.out.println(globalReservationId.value);
        try {
            java.lang.String statusValue = "";
            status.value = statusValue;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new AAAFaultMessage("AAAFaultMessage...");
        //throw new BSSFaultMessage("BSSFaultMessage...");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#createPath(java.lang.String  token ,)java.lang.String  globalReservationId ,)java.lang.String  status )*
     */
    public void createPath(java.lang.String token,javax.xml.ws.Holder<java.lang.String> globalReservationId,javax.xml.ws.Holder<java.lang.String> status) throws AAAFaultMessage , BSSFaultMessage    { 
        LOG.info("Executing operation createPath");
        System.out.println(token);
        System.out.println(globalReservationId.value);
        try {
            java.lang.String statusValue = "";
            status.value = statusValue;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new AAAFaultMessage("AAAFaultMessage...");
        //throw new BSSFaultMessage("BSSFaultMessage...");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#getNetworkTopology(net.geant.autobahn.idcp.GetTopologyContent  getNetworkTopology )*
     */
    public net.geant.autobahn.idcp.GetTopologyResponseContent getNetworkTopology(GetTopologyContent getNetworkTopology) throws AAAFaultMessage , BSSFaultMessage    { 
        LOG.info("Executing operation getNetworkTopology");
        System.out.println(getNetworkTopology);
        try {
            net.geant.autobahn.idcp.GetTopologyResponseContent _return = null;
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new AAAFaultMessage("AAAFaultMessage...");
        //throw new BSSFaultMessage("BSSFaultMessage...");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#modifyReservation(java.lang.String  globalReservationId ,)long  startTime ,)long  endTime ,)int  bandwidth ,)java.lang.String  description ,)net.geant.autobahn.idcp.PathInfo  pathInfo )*
     */
    public net.geant.autobahn.idcp.ResDetails modifyReservation(java.lang.String globalReservationId,long startTime,long endTime,int bandwidth,java.lang.String description,net.geant.autobahn.idcp.PathInfo pathInfo) throws AAAFaultMessage , BSSFaultMessage    { 
        LOG.info("Executing operation modifyReservation");
        System.out.println(globalReservationId);
        System.out.println(startTime);
        System.out.println(endTime);
        System.out.println(bandwidth);
        System.out.println(description);
        System.out.println(pathInfo);
        try {
            net.geant.autobahn.idcp.ResDetails _return = null;
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new AAAFaultMessage("AAAFaultMessage...");
        //throw new BSSFaultMessage("BSSFaultMessage...");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#notify(org.oasis_open.docs.wsn.b_2.Notify  notify )*
     */
    public void notify(org.oasis_open.docs.wsn.b_2.Notify notify) { 
        LOG.info("Executing operation notify");
        System.out.println(notify);
        try {
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#forward(net.geant.autobahn.idcp.ForwardPayload  payload ,)java.lang.String  payloadSender ,)java.lang.String  contentType ,)net.geant.autobahn.idcp.CreateReply  createReservation ,)net.geant.autobahn.idcp.ModifyResReply  modifyReservation ,)java.lang.String  cancelReservation ,)net.geant.autobahn.idcp.ResDetails  queryReservation ,)net.geant.autobahn.idcp.ListReply  listReservations ,)net.geant.autobahn.idcp.CreatePathResponseContent  createPath ,)net.geant.autobahn.idcp.RefreshPathResponseContent  refreshPath ,)net.geant.autobahn.idcp.TeardownPathResponseContent  teardownPath )*
     */
    public void forward(net.geant.autobahn.idcp.ForwardPayload payload,java.lang.String payloadSender,javax.xml.ws.Holder<java.lang.String> contentType,javax.xml.ws.Holder<CreateReply> createReservation,javax.xml.ws.Holder<ModifyResReply> modifyReservation,javax.xml.ws.Holder<java.lang.String> cancelReservation,javax.xml.ws.Holder<ResDetails> queryReservation,javax.xml.ws.Holder<ListReply> listReservations,javax.xml.ws.Holder<CreatePathResponseContent> createPath,javax.xml.ws.Holder<RefreshPathResponseContent> refreshPath,javax.xml.ws.Holder<TeardownPathResponseContent> teardownPath) throws AAAFaultMessage , BSSFaultMessage    { 
        LOG.info("Executing operation forward");
        System.out.println(payload);
        System.out.println(payloadSender);
        try {
            java.lang.String contentTypeValue = "";
            contentType.value = contentTypeValue;
            net.geant.autobahn.idcp.CreateReply createReservationValue = null;
            createReservation.value = createReservationValue;
            net.geant.autobahn.idcp.ModifyResReply modifyReservationValue = null;
            modifyReservation.value = modifyReservationValue;
            java.lang.String cancelReservationValue = "";
            cancelReservation.value = cancelReservationValue;
            net.geant.autobahn.idcp.ResDetails queryReservationValue = null;
            queryReservation.value = queryReservationValue;
            net.geant.autobahn.idcp.ListReply listReservationsValue = null;
            listReservations.value = listReservationsValue;
            net.geant.autobahn.idcp.CreatePathResponseContent createPathValue = null;
            createPath.value = createPathValue;
            net.geant.autobahn.idcp.RefreshPathResponseContent refreshPathValue = null;
            refreshPath.value = refreshPathValue;
            net.geant.autobahn.idcp.TeardownPathResponseContent teardownPathValue = null;
            teardownPath.value = teardownPathValue;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new AAAFaultMessage("AAAFaultMessage...");
        //throw new BSSFaultMessage("BSSFaultMessage...");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.OSCARS#listReservations(net.geant.autobahn.idcp.ListRequest  listReservations )*
     */
    public net.geant.autobahn.idcp.ListReply listReservations(ListRequest listReservations) throws AAAFaultMessage , BSSFaultMessage    { 
        LOG.info("Executing operation listReservations");
        System.out.println(listReservations);
        try {
            net.geant.autobahn.idcp.ListReply _return = null;
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new AAAFaultMessage("AAAFaultMessage...");
        //throw new BSSFaultMessage("BSSFaultMessage...");
    }

}
