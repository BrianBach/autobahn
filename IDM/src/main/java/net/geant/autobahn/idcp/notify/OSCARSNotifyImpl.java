
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package net.geant.autobahn.idcp.notify;



import org.apache.log4j.Logger;
import org.oasis_open.docs.wsn.b_2.NotificationMessageHolderType;
import org.oasis_open.docs.wsn.b_2.RenewResponse;

import net.geant.autobahn.idm.AccessPoint;
import net.geant.autobahn.reservation.Reservation;

/**
 * This class was generated by Apache CXF 2.2.6
 * Fri Sep 10 08:55:55 CEST 2010
 * Generated source version: 2.2.6
 * 
 */

@javax.jws.WebService(
                      serviceName = "OSCARSNotify",
                      portName = "OSCARSNotify",
                      targetNamespace = "http://oscars.es.net/OSCARS",
                      wsdlLocation = "file:etc/wsdl/IDCP/OSCARS-Notify.wsdl",
                      endpointInterface = "net.geant.autobahn.idcp.notify.OSCARSNotify")
                      
public class OSCARSNotifyImpl implements OSCARSNotify {
    
    private Logger log = Logger.getLogger(this.getClass()); 

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.notify.OSCARSNotify#subscribe(org.oasis_open.docs.wsn.b_2.Subscribe  subscribeRequest )*
     */
    public org.oasis_open.docs.wsn.b_2.SubscribeResponse subscribe(org.oasis_open.docs.wsn.b_2.Subscribe subscribeRequest) throws InvalidMessageContentExpressionFault , UnsupportedPolicyRequestFault , InvalidProducerPropertiesExpressionFault , UnacceptableInitialTerminationTimeFault , UnrecognizedPolicyRequestFault , ResourceUnknownFault , TopicNotSupportedFault , NotifyMessageNotSupportedFault , InvalidFilterFault , TopicExpressionDialectUnknownFault , AAAFaultMessage , InvalidTopicExpressionFault , SubscribeCreationFailedFault    {
    	
        log.info("Executing operation subscribe");
        
        try {
            org.oasis_open.docs.wsn.b_2.SubscribeResponse _return = null;
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new InvalidMessageContentExpressionFault("InvalidMessageContentExpressionFault...");
        //throw new UnsupportedPolicyRequestFault("UnsupportedPolicyRequestFault...");
        //throw new InvalidProducerPropertiesExpressionFault("InvalidProducerPropertiesExpressionFault...");
        //throw new UnacceptableInitialTerminationTimeFault("UnacceptableInitialTerminationTimeFault...");
        //throw new UnrecognizedPolicyRequestFault("UnrecognizedPolicyRequestFault...");
        //throw new ResourceUnknownFault("ResourceUnknownFault...");
        //throw new TopicNotSupportedFault("TopicNotSupportedFault...");
        //throw new NotifyMessageNotSupportedFault("NotifyMessageNotSupportedFault...");
        //throw new InvalidFilterFault("InvalidFilterFault...");
        //throw new TopicExpressionDialectUnknownFault("TopicExpressionDialectUnknownFault...");
        //throw new AAAFaultMessage("AAAFaultMessage...");
        //throw new InvalidTopicExpressionFault("InvalidTopicExpressionFault...");
        //throw new SubscribeCreationFailedFault("SubscribeCreationFailedFault...");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.notify.OSCARSNotify#resumeSubscription(org.oasis_open.docs.wsn.b_2.ResumeSubscription  resumeSubscriptionRequest )*
     */
    public org.oasis_open.docs.wsn.b_2.ResumeSubscriptionResponse resumeSubscription(org.oasis_open.docs.wsn.b_2.ResumeSubscription resumeSubscriptionRequest) throws ResourceUnknownFault , ResumeFailedFault , AAAFaultMessage    {
    	
        log.info("Executing operation resumeSubscription");
        
        try {
            org.oasis_open.docs.wsn.b_2.ResumeSubscriptionResponse _return = null;
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ResourceUnknownFault("ResourceUnknownFault...");
        //throw new ResumeFailedFault("ResumeFailedFault...");
        //throw new AAAFaultMessage("AAAFaultMessage...");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.notify.OSCARSNotify#registerPublisher(org.oasis_open.docs.wsn.br_2.RegisterPublisher  registerPublisherRequest )*
     */
    public org.oasis_open.docs.wsn.br_2.RegisterPublisherResponse registerPublisher(org.oasis_open.docs.wsn.br_2.RegisterPublisher registerPublisherRequest) throws PublisherRegistrationRejectedFault , UnacceptableInitialTerminationTimeFault , ResourceUnknownFault , PublisherRegistrationFailedFault , TopicNotSupportedFault , InvalidTopicExpressionFault    {
    	
        log.info("Executing operation registerPublisher");
        
        try {
            org.oasis_open.docs.wsn.br_2.RegisterPublisherResponse _return = null;
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new PublisherRegistrationRejectedFault("PublisherRegistrationRejectedFault...");
        //throw new UnacceptableInitialTerminationTimeFault("UnacceptableInitialTerminationTimeFault...");
        //throw new ResourceUnknownFault("ResourceUnknownFault...");
        //throw new PublisherRegistrationFailedFault("PublisherRegistrationFailedFault...");
        //throw new TopicNotSupportedFault("TopicNotSupportedFault...");
        //throw new InvalidTopicExpressionFault("InvalidTopicExpressionFault...");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.notify.OSCARSNotify#unsubscribe(org.oasis_open.docs.wsn.b_2.Unsubscribe  unsubscribeRequest )*
     */
    public org.oasis_open.docs.wsn.b_2.UnsubscribeResponse unsubscribe(org.oasis_open.docs.wsn.b_2.Unsubscribe unsubscribeRequest) throws UnableToDestroySubscriptionFault , ResourceUnknownFault , AAAFaultMessage    {
    	
        log.info("Executing operation unsubscribe");
        
        try {
            org.oasis_open.docs.wsn.b_2.UnsubscribeResponse _return = null;
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new UnableToDestroySubscriptionFault("UnableToDestroySubscriptionFault...");
        //throw new ResourceUnknownFault("ResourceUnknownFault...");
        //throw new AAAFaultMessage("AAAFaultMessage...");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.notify.OSCARSNotify#pauseSubscription(org.oasis_open.docs.wsn.b_2.PauseSubscription  pauseSubscriptionRequest )*
     */
    public org.oasis_open.docs.wsn.b_2.PauseSubscriptionResponse pauseSubscription(org.oasis_open.docs.wsn.b_2.PauseSubscription pauseSubscriptionRequest) throws PauseFailedFault , ResourceUnknownFault , AAAFaultMessage    {
    	
        log.info("Executing operation pauseSubscription");
        
        try {
            org.oasis_open.docs.wsn.b_2.PauseSubscriptionResponse _return = null;
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new PauseFailedFault("PauseFailedFault...");
        //throw new ResourceUnknownFault("ResourceUnknownFault...");
        //throw new AAAFaultMessage("AAAFaultMessage...");
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.notify.OSCARSNotify#renew(org.oasis_open.docs.wsn.b_2.Renew  renewRequest )*
     */
    public org.oasis_open.docs.wsn.b_2.RenewResponse renew(org.oasis_open.docs.wsn.b_2.Renew renewRequest) throws ResourceUnknownFault , UnacceptableTerminationTimeFault , AAAFaultMessage    {
    	
        log.info("Executing operation renew");
        
        try {
        	
        	// prolongate the subscription
        	String notifier = renewRequest.getSubscriptionReference().getAddress().getValue();
        	
        	System.out.println("notifier address: " + notifier);
        	
            org.oasis_open.docs.wsn.b_2.RenewResponse _return = new RenewResponse();
            
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ResourceUnknownFault("ResourceUnknownFault...");
        //throw new UnacceptableTerminationTimeFault("UnacceptableTerminationTimeFault...");
        //throw new AAAFaultMessage("AAAFaultMessage...");
    }
    
    private void eventToReservationState(Reservation resv, String event) {
    	
    	// switch reservation's state based on incoming state
    	// there are two ACTIVATING and FINISHING events (depending on
    	// whether home or last domain reports, only one event is used
    	
    	if (event.compareTo("RESERVATION_CREATE_CONFIRMED") == 0)
    		resv.setState(4); // SCHEDULING
    	else if (event.compareTo("RESERVATION_CREATE_COMPLETED") == 0)
    		resv.setState(5); // SCHEDULED
    	else if (event.compareTo("DOWNSTREAM_PATH_SETUP_CONFIRMED") == 0)
    		resv.setState(9); // ACTIVATING
    	else if (event.compareTo("PATH_SETUP_COMPLETED") == 0)
    		resv.setState(10); // ACTIVE
    	else if (event.compareTo("DOWNSTREAM_PATH_CONFIRMED") == 0)
    		resv.setState(11); // FINISHING
    	else if (event.compareTo("PATH_TEARDOWN_COMPLETED") == 0)
    		resv.setState(21); // FINISHED
    	else if (event.compareTo("RESERVATION_CANCEL_CONFIRMED") == 0)
    		resv.setState(6); // CANCELLING
    	else if (event.compareTo("RESERVATION_CANCEL_COMPLETED") == 0)
    		resv.setState(22); // CANCELLED
    	else 
    		resv.setState(23); // FAILED
    	
    	// FAILED events are: RESERVATION_CREATE_FAILED, 
    	// RESERVATION_CANCEL_FAILED, PATH_SETUP_FAILED,
    	// PATH_TEARDOWN_FAILED
    }


    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.notify.OSCARSNotify#notify(org.oasis_open.docs.wsn.b_2.Notify  notify )*
     */
    public void notify(org.oasis_open.docs.wsn.b_2.Notify notify) {
    	
        log.info("Executing operation notify");
        
        try {

        	for (NotificationMessageHolderType notification : notify.getNotificationMessage()) {
        		
        		for (Object eventObject : notification.getMessage().getAny()) {
        			
        			EventContent event = (EventContent)eventObject;
        			
        			// find reservation
        			String resID = event.getResDetails().getGlobalReservationId();
        			Reservation resv = AccessPoint.getInstance().getReservation(resID);
        	
        			if (resv != null)
        				eventToReservationState(resv, event.getResDetails().getStatus());
        		}
        	}
        	
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see net.geant.autobahn.idcp.notify.OSCARSNotify#destroyRegistration(org.oasis_open.docs.wsn.br_2.DestroyRegistration  destroyRegistrationRequest )*
     */
    public org.oasis_open.docs.wsn.br_2.DestroyRegistrationResponse destroyRegistration(org.oasis_open.docs.wsn.br_2.DestroyRegistration destroyRegistrationRequest) throws ResourceUnknownFault , ResourceNotDestroyedFault , AAAFaultMessage    {
    	
        log.info("Executing operation destroyRegistration");
        
        try {
            org.oasis_open.docs.wsn.br_2.DestroyRegistrationResponse _return = null;
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ResourceUnknownFault("ResourceUnknownFault...");
        //throw new ResourceNotDestroyedFault("ResourceNotDestroyedFault...");
        //throw new AAAFaultMessage("AAAFaultMessage...");
    }
}
